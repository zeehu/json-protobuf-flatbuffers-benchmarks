// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vector_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vector_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vector_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vector_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vector_5fdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vector_5fdata_2eproto;
namespace proto {
namespace vector_data {
class VectorData;
class VectorDataDefaultTypeInternal;
extern VectorDataDefaultTypeInternal _VectorData_default_instance_;
class VectorDataset;
class VectorDatasetDefaultTypeInternal;
extern VectorDatasetDefaultTypeInternal _VectorDataset_default_instance_;
}  // namespace vector_data
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::vector_data::VectorData* Arena::CreateMaybeMessage<::proto::vector_data::VectorData>(Arena*);
template<> ::proto::vector_data::VectorDataset* Arena::CreateMaybeMessage<::proto::vector_data::VectorDataset>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {
namespace vector_data {

// ===================================================================

class VectorData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.vector_data.VectorData) */ {
 public:
  inline VectorData() : VectorData(nullptr) {};
  virtual ~VectorData();

  VectorData(const VectorData& from);
  VectorData(VectorData&& from) noexcept
    : VectorData() {
    *this = ::std::move(from);
  }

  inline VectorData& operator=(const VectorData& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorData& operator=(VectorData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VectorData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VectorData* internal_default_instance() {
    return reinterpret_cast<const VectorData*>(
               &_VectorData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VectorData& a, VectorData& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VectorData* New() const final {
    return CreateMaybeMessage<VectorData>(nullptr);
  }

  VectorData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VectorData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VectorData& from);
  void MergeFrom(const VectorData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.vector_data.VectorData";
  }
  protected:
  explicit VectorData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vector_5fdata_2eproto);
    return ::descriptor_table_vector_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated double values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  double _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_values() const;
  void _internal_add_values(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_values();
  public:
  double values(int index) const;
  void set_values(int index, double value);
  void add_values(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:proto.vector_data.VectorData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vector_5fdata_2eproto;
};
// -------------------------------------------------------------------

class VectorDataset PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.vector_data.VectorDataset) */ {
 public:
  inline VectorDataset() : VectorDataset(nullptr) {};
  virtual ~VectorDataset();

  VectorDataset(const VectorDataset& from);
  VectorDataset(VectorDataset&& from) noexcept
    : VectorDataset() {
    *this = ::std::move(from);
  }

  inline VectorDataset& operator=(const VectorDataset& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorDataset& operator=(VectorDataset&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VectorDataset& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VectorDataset* internal_default_instance() {
    return reinterpret_cast<const VectorDataset*>(
               &_VectorDataset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VectorDataset& a, VectorDataset& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorDataset* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorDataset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VectorDataset* New() const final {
    return CreateMaybeMessage<VectorDataset>(nullptr);
  }

  VectorDataset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VectorDataset>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VectorDataset& from);
  void MergeFrom(const VectorDataset& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorDataset* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.vector_data.VectorDataset";
  }
  protected:
  explicit VectorDataset(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vector_5fdata_2eproto);
    return ::descriptor_table_vector_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVectorsFieldNumber = 1,
  };
  // repeated .proto.vector_data.VectorData vectors = 1;
  int vectors_size() const;
  private:
  int _internal_vectors_size() const;
  public:
  void clear_vectors();
  ::proto::vector_data::VectorData* mutable_vectors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::vector_data::VectorData >*
      mutable_vectors();
  private:
  const ::proto::vector_data::VectorData& _internal_vectors(int index) const;
  ::proto::vector_data::VectorData* _internal_add_vectors();
  public:
  const ::proto::vector_data::VectorData& vectors(int index) const;
  ::proto::vector_data::VectorData* add_vectors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::vector_data::VectorData >&
      vectors() const;

  // @@protoc_insertion_point(class_scope:proto.vector_data.VectorDataset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::vector_data::VectorData > vectors_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vector_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VectorData

// repeated double values = 1;
inline int VectorData::_internal_values_size() const {
  return values_.size();
}
inline int VectorData::values_size() const {
  return _internal_values_size();
}
inline void VectorData::clear_values() {
  values_.Clear();
}
inline double VectorData::_internal_values(int index) const {
  return values_.Get(index);
}
inline double VectorData::values(int index) const {
  // @@protoc_insertion_point(field_get:proto.vector_data.VectorData.values)
  return _internal_values(index);
}
inline void VectorData::set_values(int index, double value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.vector_data.VectorData.values)
}
inline void VectorData::_internal_add_values(double value) {
  values_.Add(value);
}
inline void VectorData::add_values(double value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:proto.vector_data.VectorData.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VectorData::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VectorData::values() const {
  // @@protoc_insertion_point(field_list:proto.vector_data.VectorData.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VectorData::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VectorData::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:proto.vector_data.VectorData.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// VectorDataset

// repeated .proto.vector_data.VectorData vectors = 1;
inline int VectorDataset::_internal_vectors_size() const {
  return vectors_.size();
}
inline int VectorDataset::vectors_size() const {
  return _internal_vectors_size();
}
inline void VectorDataset::clear_vectors() {
  vectors_.Clear();
}
inline ::proto::vector_data::VectorData* VectorDataset::mutable_vectors(int index) {
  // @@protoc_insertion_point(field_mutable:proto.vector_data.VectorDataset.vectors)
  return vectors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::vector_data::VectorData >*
VectorDataset::mutable_vectors() {
  // @@protoc_insertion_point(field_mutable_list:proto.vector_data.VectorDataset.vectors)
  return &vectors_;
}
inline const ::proto::vector_data::VectorData& VectorDataset::_internal_vectors(int index) const {
  return vectors_.Get(index);
}
inline const ::proto::vector_data::VectorData& VectorDataset::vectors(int index) const {
  // @@protoc_insertion_point(field_get:proto.vector_data.VectorDataset.vectors)
  return _internal_vectors(index);
}
inline ::proto::vector_data::VectorData* VectorDataset::_internal_add_vectors() {
  return vectors_.Add();
}
inline ::proto::vector_data::VectorData* VectorDataset::add_vectors() {
  // @@protoc_insertion_point(field_add:proto.vector_data.VectorDataset.vectors)
  return _internal_add_vectors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::vector_data::VectorData >&
VectorDataset::vectors() const {
  // @@protoc_insertion_point(field_list:proto.vector_data.VectorDataset.vectors)
  return vectors_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace vector_data
}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vector_5fdata_2eproto
