# automatically generated by the FlatBuffers compiler, do not modify

# namespace: vector_data

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class VectorDataset(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = VectorDataset()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVectorDataset(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def VectorDatasetBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x56\x44\x41\x54", size_prefixed=size_prefixed)

    # VectorDataset
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # VectorDataset
    def Vectors(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from flatbuf.vector_data.VectorData import VectorData
            obj = VectorData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # VectorDataset
    def VectorsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VectorDataset
    def VectorsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def VectorDatasetStart(builder):
    builder.StartObject(1)

def Start(builder):
    VectorDatasetStart(builder)

def VectorDatasetAddVectors(builder, vectors):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(vectors), 0)

def AddVectors(builder, vectors):
    VectorDatasetAddVectors(builder, vectors)

def VectorDatasetStartVectorsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartVectorsVector(builder, numElems):
    return VectorDatasetStartVectorsVector(builder, numElems)

def VectorDatasetEnd(builder):
    return builder.EndObject()

def End(builder):
    return VectorDatasetEnd(builder)
