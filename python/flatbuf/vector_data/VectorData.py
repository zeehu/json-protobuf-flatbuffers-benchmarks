# automatically generated by the FlatBuffers compiler, do not modify

# namespace: vector_data

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class VectorData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = VectorData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVectorData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def VectorDataBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x56\x44\x41\x54", size_prefixed=size_prefixed)

    # VectorData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # VectorData
    def Values(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # VectorData
    def ValuesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # VectorData
    def ValuesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VectorData
    def ValuesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def VectorDataStart(builder):
    builder.StartObject(1)

def Start(builder):
    VectorDataStart(builder)

def VectorDataAddValues(builder, values):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(values), 0)

def AddValues(builder, values):
    VectorDataAddValues(builder, values)

def VectorDataStartValuesVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartValuesVector(builder, numElems):
    return VectorDataStartValuesVector(builder, numElems)

def VectorDataEnd(builder):
    return builder.EndObject()

def End(builder):
    return VectorDataEnd(builder)
